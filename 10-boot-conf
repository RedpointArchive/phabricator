#!/bin/bash

set -e
set -x

# If this is a derived (baked) image, skip all of this logic.
if [ -f /baked ]; then
  exit 0
fi

# Read environment variables and validate configuration
if [ "$MYSQL_LINKED_CONTAINER" != "" ]; then
  MYSQL_HOST_VARIABLE="${MYSQL_LINKED_CONTAINER}_PORT_3306_TCP_ADDR"
  MYSQL_HOST="${!MYSQL_HOST_VARIABLE}"
  MYSQL_PORT_VARIABLE="${MYSQL_LINKED_CONTAINER}_PORT_3306_TCP_PORT"
  MYSQL_PORT="${!MYSQL_PORT_VARIABLE}"
  unset MYSQL_HOST_VARIABLE
  unset MYSQL_PORT_VARIABLE
fi

if [ "$MYSQL_STORAGE_NAMESPACE" == "" ]; then
  MYSQL_STORAGE_NAMESPACE=phabricator
fi

if [ "$SSL_TYPE" == "" ]; then
  SSL_TYPE=none
fi

if [ "$PHABRICATOR_STORAGE_TYPE" == "" ]; then
  PHABRICATOR_STORAGE_TYPE=mysql
fi

if [ "$OVERRIDE_PHABRICATOR_URI" != "" ] ||
   [ "$OVERRIDE_PHABRICATOR_BRANCH" != "" ] ||
   [ "$OVERRIDE_ARCANIST_URI" != "" ] ||
   [ "$OVERRIDE_ARCANIST_BRANCH" != "" ] ||
   [ "$OVERRIDE_LIBPHUTIL_URI" != "" ] ||
   [ "$OVERRIDE_LIBPHUTIL_BRANCH" != "" ]; then
  ENABLE_UPDATE_ON_START=true
fi

if [ -f /config/script.pre ]; then
  SCRIPT_BEFORE_UPDATE=/config/script.pre
fi

if [ -f /config/script.premig ]; then
  SCRIPT_BEFORE_MIGRATION=/config/script.premig
fi

if [ -f /config/script.post ]; then
  SCRIPT_AFTER_MIGRATION=/config/script.post
fi

if [ -f /config/script.phd ]; then
  SCRIPT_AFTER_DAEMONS=/config/script.phd
fi

if [ -f /config/script.letsencrypt ]; then
  SCRIPT_AFTER_LETS_ENCRYPT=/config/script.letsencrypt
fi

if [ -f /config/letsencrypt.config ]; then 
  . /config/letsencrypt.config
  if [ "$LETS_ENCRYPT" == "true" ]; then
    SSL_TYPE="letsencrypt"
    SSL_EMAIL="$LETS_ENCRYPT_EMAIL"
    if [ "$PHABRICATOR_HOST" == "" ]; then
      PHABRICATOR_HOST="$LETS_ENCRYPT_DOMAIN"
    fi
  fi
fi

if [ -d /config/keycache ]; then
  PHABRICATOR_HOST_KEYS_PATH="/config/keycache"
fi

cat >/config.saved <<EOF
OVERRIDE_PHABRICATOR_URI="$OVERRIDE_PHABRICATOR_URI"
OVERRIDE_PHABRICATOR_BRANCH="$OVERRIDE_PHABRICATOR_BRANCH"
OVERRIDE_ARCANIST_URI="$OVERRIDE_ARCANIST_URI"
OVERRIDE_ARCANIST_BRANCH="$OVERRIDE_ARCANIST_BRANCH"
OVERRIDE_LIBPHUTIL_URI="$OVERRIDE_LIBPHUTIL_URI"
OVERRIDE_LIBPHUTIL_BRANCH="$OVERRIDE_LIBPHUTIL_BRANCH"
PHABRICATOR_HOST="$PHABRICATOR_HOST"
PHABRICATOR_CDN="$PHABRICATOR_CDN"
PHABRICATOR_REPOSITORY_PATH="$PHABRICATOR_REPOSITORY_PATH"
PHABRICATOR_STORAGE_TYPE="$PHABRICATOR_STORAGE_TYPE"
PHABRICATOR_STORAGE_PATH="$PHABRICATOR_STORAGE_PATH"
PHABRICATOR_STORAGE_BUCKET="$PHABRICATOR_STORAGE_BUCKET"
PHABRICATOR_VCS_USER="$PHABRICATOR_VCS_USER"
PHABRICATOR_HOST_KEYS_PATH="$PHABRICATOR_HOST_KEYS_PATH"
AWS_S3_ACCESS_KEY="$AWS_S3_ACCESS_KEY"
AWS_S3_SECRET_KEY="$AWS_S3_SECRET_KEY"
MYSQL_HOST="$MYSQL_HOST"
MYSQL_PORT="$MYSQL_PORT"
MYSQL_USER="$MYSQL_USER"
MYSQL_PASS="$MYSQL_PASS"
MYSQL_STORAGE_NAMESPACE="$MYSQL_STORAGE_NAMESPACE"
ENABLE_APCU="$ENABLE_APCU"
ENABLE_UPDATE_ON_START="$ENABLE_UPDATE_ON_START"
SSL_TYPE="$SSL_TYPE"
SSL_CERTIFICATE="$SSL_CERTIFICATE"
SSL_PRIVATE_KEY="$SSL_PRIVATE_KEY"
SSL_EMAIL="$SSL_EMAIL"
SCRIPT_BEFORE_UPDATE="$SCRIPT_BEFORE_UPDATE"
SCRIPT_BEFORE_MIGRATION="$SCRIPT_BEFORE_MIGRATION"
SCRIPT_AFTER_MIGRATION="$SCRIPT_AFTER_MIGRATION"
SCRIPT_AFTER_LETS_ENCRYPT="$SCRIPT_AFTER_LETS_ENCRYPT"
SCRIPT_BEFORE_DAEMONS="$SCRIPT_BEFORE_DAEMONS"
SCRIPT_AFTER_DAEMONS="$SCRIPT_AFTER_DAEMONS"
EOF

# Reload configuration
source /config.saved

# Set up Phabricator
if [ "$SCRIPT_BEFORE_UPDATE" != "" ]; then
  pushd /srv/phabricator/phabricator
  $SCRIPT_BEFORE_UPDATE
  popd
fi

if [ "$ENABLE_UPDATE_ON_START" == "true" ]; then
  pushd /srv/phabricator/libphutil
  if [ "$OVERRIDE_LIBPHUTIL_URI" != "" ]; then
    sudo -u "$PHABRICATOR_VCS_USER" git remote set-url origin $OVERRIDE_LIBPHUTIL_URI
  fi
  sudo -u "$PHABRICATOR_VCS_USER" git fetch --all
  if [ "$OVERRIDE_LIBPHUTIL_BRANCH" != "" ]; then
    sudo -u "$PHABRICATOR_VCS_USER" git checkout $OVERRIDE_LIBPHUTIL_BRANCH
  else
    sudo -u "$PHABRICATOR_VCS_USER" git pull
  fi
  popd

  pushd /srv/phabricator/arcanist
  if [ "$OVERRIDE_ARCANIST_URI" != "" ]; then
    sudo -u "$PHABRICATOR_VCS_USER" git remote set-url origin $OVERRIDE_ARCANIST_URI
  fi
  sudo -u "$PHABRICATOR_VCS_USER" git fetch --all
  if [ "$OVERRIDE_ARCANIST_BRANCH" != "" ]; then
    sudo -u "$PHABRICATOR_VCS_USER" git checkout $OVERRIDE_ARCANIST_BRANCH
  else
    sudo -u "$PHABRICATOR_VCS_USER" git pull
  fi
  popd

  pushd /srv/phabricator/phabricator
  if [ "$OVERRIDE_PHABRICATOR_URI" != "" ]; then
    sudo -u "$PHABRICATOR_VCS_USER" git remote set-url origin $OVERRIDE_PHABRICATOR_URI
  fi
  sudo -u "$PHABRICATOR_VCS_USER" git fetch --all
  if [ "$OVERRIDE_PHABRICATOR_BRANCH" != "" ]; then
    sudo -u "$PHABRICATOR_VCS_USER" git checkout $OVERRIDE_PHABRICATOR_BRANCH
  else
    sudo -u "$PHABRICATOR_VCS_USER" git pull
  fi
  popd
fi

pushd /srv/phabricator/phabricator
if [ "$MYSQL_HOST" != "" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set mysql.host "$MYSQL_HOST"
fi
if [ "$MYSQL_PORT" != "" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set mysql.port "$MYSQL_PORT"
fi
if [ "$MYSQL_USER" != "" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set mysql.user "$MYSQL_USER"
fi
if [ "$MYSQL_PASS" != "" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set mysql.pass "$MYSQL_PASS"
fi
if [ "$MYSQL_STORAGE_NAMESPACE" != "" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set storage.default-namespace "$MYSQL_STORAGE_NAMESPACE"
fi
if [ "$PHABRICATOR_HOST" != "" ]; then
  if [ "$SSL_TYPE" == "none" ]; then
    sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set phabricator.base-uri "http://$PHABRICATOR_HOST/"
  else
    sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set phabricator.base-uri "https://$PHABRICATOR_HOST/"
  fi
fi
if [ "$PHABRICATOR_CDN" != "" ]; then
  if [ "$SSL_TYPE" == "none" ]; then
    sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set security.alternate-file-domain "http://$PHABRICATOR_CDN/"
  else
    sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set security.alternate-file-domain "https://$PHABRICATOR_CDN/"
  fi
fi
sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set phd.user "$PHABRICATOR_VCS_USER"
sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set pygments.enabled true
if [ "$PHABRICATOR_REPOSITORY_PATH" != "" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set repository.default-local-path "$PHABRICATOR_REPOSITORY_PATH"
fi
if [ "$PHABRICATOR_STORAGE_TYPE" == "mysql" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set storage.mysql-engine.max-size 67108864
fi
if [ "$PHABRICATOR_STORAGE_TYPE" == "disk" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set storage.mysql-engine.max-size 0
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set storage.local-disk.path "$PHABRICATOR_STORAGE_PATH"
fi
if [ "$PHABRICATOR_STORAGE_TYPE" == "s3" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set storage.mysql-engine.max-size 0
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set storage.s3.bucket "$PHABRICATOR_STORAGE_BUCKET"
fi
if [ "$AWS_S3_ACCESS_KEY" != "" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set amazon-s3.access-key "$AWS_S3_ACCESS_KEY"
fi
if [ "$AWS_S3_SECRET_KEY" != "" ]; then
  sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set amazon-s3.secret-key "$AWS_S3_SECRET_KEY"
fi
if [ "$SSL_TYPE" == "none" ]; then
  APHLICT_PROTOCOL="http"
  APHLICT_PORT=80
else
  APHLICT_PROTOCOL="https"
  APHLICT_PORT=443
fi
sudo -u "$PHABRICATOR_VCS_USER" ./bin/config set notification.servers '[{"type": "client","host": "'$PHABRICATOR_HOST'","port": '$APHLICT_PORT',"protocol": "'$APHLICT_PROTOCOL'","path": "/ws/"},{"type": "admin","host": "127.0.0.1","port": 22281,"protocol": "http"}]'
unset APHLICT_PROTOCOL
unset APHLICT_PORT
popd

if [ "$ENABLE_APCU" == "true" ]; then
  cat >/etc/php5/conf.d/apcu.ini <<EOF
extension=apcu.so
EOF
fi

if [ "$SCRIPT_BEFORE_MIGRATION" != "" ]; then
  pushd /srv/phabricator/phabricator
  $SCRIPT_BEFORE_MIGRATION
  popd
fi

# The search database may need to be repaired, and if so, will prevent bin/storage upgrade from working
# so preemptively run a repair on that database now.
mysqlcheck --host="$MYSQL_HOST" --port="$MYSQL_PORT" --user="$MYSQL_USER" --password="$MYSQL_PASS" --databases "${MYSQL_STORAGE_NAMESPACE}_search" || true

/srv/phabricator/phabricator/bin/storage upgrade --force

if [ "$SCRIPT_AFTER_MIGRATION" != "" ]; then
  pushd /srv/phabricator/phabricator
  $SCRIPT_AFTER_MIGRATION
  popd
fi

