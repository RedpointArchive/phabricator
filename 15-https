#!/bin/bash

# Source configuration
source /config.saved

if [ ! -f /baked ]; then
  # Create the directory 
  mkdir /etc/nginx/servers
  
  # Enable HTTP server
  mv /etc/nginx/disabled-server-http.conf /etc/nginx/servers/http.conf
fi

if [ "$SSL_TYPE" == "letsencrypt" ]; then 
  if [ ! -f /is-baking ]; then
    # Let's Encrypt works by querying the web server over HTTP in order
    # to issue the certificates, so we need to start Nginx temporarily
    # now in order for certificates to be issued or renewed.
    /usr/sbin/nginx
    while [ ! -e /run/nginx.pid ]; do
      echo "Waiting for /run/nginx.pid to appear for Let's Encrypt issuance..."
      sleep 1
    done

    # If the /config directory doesn't exist, abort
    if [ ! -d /config ]; then
      echo "You must volume mount /config in Docker to a permanent location for Let's Encrypt to work."
      exit 1
    fi

    # If the Let's Encrypt folder doesn't exist, create it
    if [ ! -d /config/letsencrypt ]; then
        mkdir /config/letsencrypt
    fi
  fi

  if [ ! -f /baked ]; then
    # Make the webroot that we will store certificates in
    mkdir /srv/letsencrypt-webroot
   
    # Link the Let's Encrypt folder into the configuration directory
    ln -s /config/letsencrypt /etc/letsencrypt
  fi

  if [ ! -f /is-baking ]; then
    # Perform the Let's Encrypt certificate issuance
    /srv/letsencrypt/letsencrypt-auto certonly --text --non-interactive --keep --debug --agree-tos --webroot -w /srv/letsencrypt-webroot --email $SSL_EMAIL -d $PHABRICATOR_HOST
  fi

  if [ ! -f /baked ]; then
    # Add Let's Encrypt issuance to cron.weekly
    cat >/etc/cron.weekly/letsencrypt <<EOF
#!bin/bash

/srv/letsencrypt/letsencrypt-auto certonly --text --non-interactive --keep --debug --agree-tos --webroot -w /srv/letsencrypt-webroot --email $SSL_EMAIL -d $PHABRICATOR_HOST
EOF
    chmod a+x /etc/cron.weekly/letsencrypt

    # Enable HTTPS using the Let's Encrypt configuration
    mv /etc/nginx/disabled-server-https-letsencrypt.conf /etc/nginx/servers/https-letsencrypt.conf
  fi

  if [ ! -f /is-baking ]; then
    if [ -e $SCRIPT_AFTER_LETS_ENCRYPT ]; then
      echo "Applying post-letsencrypt script..."
      $SCRIPT_AFTER_LETS_ENCRYPT
    fi

    # Link /config/letsencrypt/installed to /config/letsencrypt/live/*
    rm /config/letsencrypt/installed
    ln -s /config/letsencrypt/live/$PHABRICATOR_HOST /config/letsencrypt/installed

    # Kill Nginx and remove the PID file, we'll start Nginx back up
    # again with HTTPS support later
    kill -KILL $(pidof nginx)
    rm /run/nginx.pid
  fi
fi

if [ "$SSL_TYPE" == "manual" ]; then
  if [ ! -f /baked ]; then
    cp -f $SSL_CERTIFICATE /etc/nginx/cert.pem
    cp -f $SSL_PRIVATE_KEY /etc/nginx/cert.key
    chown nginx:nginx /etc/nginx/cert.pem /etc/nginx/cert.key 
    chmod 0400 /etc/nginx/cert.pem /etc/nginx/cert.key

    # Enable HTTPS using the manual configuration
    mv /etc/nginx/disabled-server-https-manual.conf /etc/nginx/servers/https-manual.conf
  fi
fi

if [ "$SSL_TYPE" == "external" ]; then
  if [ ! -f /baked ]; then
    #add the https php preamble when using ssl terminating reverse proxy 
    touch /srv/phabricator/phabricator/support/preamble.php
    chown $PHABRICATOR_VCS_USER:wwwgrp-phabricator /srv/phabricator/phabricator/support/preamble.php
    chmod a+x /srv/phabricator/phabricator/support/preamble.php

    echo "<?php

    \$_SERVER['HTTPS'] = true;" > /srv/phabricator/phabricator/support/preamble.php
  fi
fi
